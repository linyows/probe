// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: testdata/performance/performance_test.proto

package performance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlatDataService_ProcessFlat_FullMethodName = "/performance_test.FlatDataService/ProcessFlat"
)

// FlatDataServiceClient is the client API for FlatDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlatDataServiceClient interface {
	ProcessFlat(ctx context.Context, in *FlatDataRequest, opts ...grpc.CallOption) (*FlatDataResponse, error)
}

type flatDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlatDataServiceClient(cc grpc.ClientConnInterface) FlatDataServiceClient {
	return &flatDataServiceClient{cc}
}

func (c *flatDataServiceClient) ProcessFlat(ctx context.Context, in *FlatDataRequest, opts ...grpc.CallOption) (*FlatDataResponse, error) {
	out := new(FlatDataResponse)
	err := c.cc.Invoke(ctx, FlatDataService_ProcessFlat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlatDataServiceServer is the server API for FlatDataService service.
// All implementations should embed UnimplementedFlatDataServiceServer
// for forward compatibility
type FlatDataServiceServer interface {
	ProcessFlat(context.Context, *FlatDataRequest) (*FlatDataResponse, error)
}

// UnimplementedFlatDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlatDataServiceServer struct {
}

func (UnimplementedFlatDataServiceServer) ProcessFlat(context.Context, *FlatDataRequest) (*FlatDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessFlat not implemented")
}

// UnsafeFlatDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlatDataServiceServer will
// result in compilation errors.
type UnsafeFlatDataServiceServer interface {
	mustEmbedUnimplementedFlatDataServiceServer()
}

func RegisterFlatDataServiceServer(s grpc.ServiceRegistrar, srv FlatDataServiceServer) {
	s.RegisterService(&FlatDataService_ServiceDesc, srv)
}

func _FlatDataService_ProcessFlat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlatDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlatDataServiceServer).ProcessFlat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlatDataService_ProcessFlat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlatDataServiceServer).ProcessFlat(ctx, req.(*FlatDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlatDataService_ServiceDesc is the grpc.ServiceDesc for FlatDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlatDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "performance_test.FlatDataService",
	HandlerType: (*FlatDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessFlat",
			Handler:    _FlatDataService_ProcessFlat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/performance/performance_test.proto",
}

const (
	StructDataService_ProcessStruct_FullMethodName = "/performance_test.StructDataService/ProcessStruct"
)

// StructDataServiceClient is the client API for StructDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StructDataServiceClient interface {
	ProcessStruct(ctx context.Context, in *StructDataRequest, opts ...grpc.CallOption) (*StructDataResponse, error)
}

type structDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStructDataServiceClient(cc grpc.ClientConnInterface) StructDataServiceClient {
	return &structDataServiceClient{cc}
}

func (c *structDataServiceClient) ProcessStruct(ctx context.Context, in *StructDataRequest, opts ...grpc.CallOption) (*StructDataResponse, error) {
	out := new(StructDataResponse)
	err := c.cc.Invoke(ctx, StructDataService_ProcessStruct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StructDataServiceServer is the server API for StructDataService service.
// All implementations should embed UnimplementedStructDataServiceServer
// for forward compatibility
type StructDataServiceServer interface {
	ProcessStruct(context.Context, *StructDataRequest) (*StructDataResponse, error)
}

// UnimplementedStructDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStructDataServiceServer struct {
}

func (UnimplementedStructDataServiceServer) ProcessStruct(context.Context, *StructDataRequest) (*StructDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStruct not implemented")
}

// UnsafeStructDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StructDataServiceServer will
// result in compilation errors.
type UnsafeStructDataServiceServer interface {
	mustEmbedUnimplementedStructDataServiceServer()
}

func RegisterStructDataServiceServer(s grpc.ServiceRegistrar, srv StructDataServiceServer) {
	s.RegisterService(&StructDataService_ServiceDesc, srv)
}

func _StructDataService_ProcessStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StructDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StructDataServiceServer).ProcessStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StructDataService_ProcessStruct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StructDataServiceServer).ProcessStruct(ctx, req.(*StructDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StructDataService_ServiceDesc is the grpc.ServiceDesc for StructDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StructDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "performance_test.StructDataService",
	HandlerType: (*StructDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessStruct",
			Handler:    _StructDataService_ProcessStruct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/performance/performance_test.proto",
}
